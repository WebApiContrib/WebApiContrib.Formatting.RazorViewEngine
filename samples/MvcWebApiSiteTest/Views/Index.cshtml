@{
	_Layout = "~/Views/Shared/_Layout.cshtml";
}

@section featured {
    <section class="featured">
        <div class="content-wrapper">
         
            <div>
               <hgroup class="title">
                <h2>ASP.Net Web API using HtmlMediaTypeFormater and RazorEngine</h2>
            </hgroup>
            <p>
                By using the HtmlMediaTypeViewFormatter and the Razor view parser, it's now possible to use ASP.Net Web API to render a model as HTML by using Razor.

                This site will demonstrate the use of the formatter and the Razor parser.
            </p>
        </div>
    </section>
}

@section contentMenu {
                                <li>                <a href="#Quick_overview">Quick overview</a>
                            <ol><li>                <a href="#Finding_a_Package">Finding a Package</a>
                            </li><li>                <a href="#Package_Sources">Package Sources</a>
                            </li><li>                <a href="#Installing_a_Package">Installing a Package</a>
                            </li><li>                <a href="#Removing_a_Package">Removing a Package</a>
                            </li><li>                <a href="#Updating_a_Package">Updating a Package</a>
                            </li></ol></li><li>                <a href="#Managing_Packages_for_the_Solution">Managing Packages for the Solution</a>
                            <ol><li>                <a href="#Installing_Online_Packages">Installing Online Packages</a>
                            </li><li>                <a href="#Managing_Installed_Packages">Managing Installed Packages</a>
                            </li><li>                <a href="#Updating_Packages">Updating Packages</a>
                            </li></ol></li>
}


<h3 id="Quick_overview">1 Quick overview</h3>

<p>Before we dive into the details, here is a simple example of using the HtmlMediaTypeViewFormatter with Razor:</p>
<pre class="cs">
    <code>
    public class CustomerController : ApiController
    {
        public Customer Get()
        {
            return new Customer { Name = "John Doe", Country = "Country" };
        }
    }
</code>
</pre>
<p>
This controller will simply return a Customer as JSON or XAML based on the "Accept" or "content-type" header.
</p>
<p>
    By adding the HtmlMediaTypeViewFormatter to the global.asax and using the RazorViewLocator and a RazorViewParser the code can also render the model as HTML by using a View. By deafult the view tried to be located
    is "Customer.cshtml" or "Customer.vbhtml", based on the name of the model returned.
</p>
<pre class="cs">
    <code>
    protected void Application_Start()
    {
        //...

        GlobalConfiguration.Configuration.Formatters.Add(new HtmlMediaTypeViewFormatter());
        
        GlobalViews.DefaultViewParser = new RazorViewParser();
        GlobalViews.DefaultViewLocator = new RazorViewLocator();
        
        //...
    }
</code>
</pre>
<p>
Customer.cshtml located in the "~/Views" folder of the web project
</p>
<pre class="html">
    <code>
    &lt;html&gt;Hello &#64;Model.Name! Welcome to Razor!&lt;/html&gt;
</code>
</pre>

<h3 id="Install_packages">2 Install packages</h3>